services:
    traefik:
        image: traefik:v3.1
        container_name: traefik
        restart: unless-stopped
        pull_policy: always
        ports:
            - 80:80
            - 443:443
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - ./traefik/traefik.toml:/traefik.toml
        labels:
            - traefik.enable=true
            - traefik.http.services.traefik.loadbalancer.server.port=8080
            - traefik.http.routers.traefik.rule=Host(`traefik.${HOST_IP}.traefik.me`)
            - traefik.http.routers.traefik.entrypoints=web
            - traefik.http.middlewares.https_redirect.redirectscheme.scheme=https
            - traefik.http.middlewares.https_redirect.redirectscheme.permanent=true
            - traefik.http.middlewares.https_redirect.redirectscheme.port=443

    mysql80:
        image: percona:8.0
        container_name: mysql80
        command: mysqld --sql_mode="STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION" --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --log_bin_trust_function_creators=1 --max_allowed_packet=128M --default_storage_engine=InnoDB --character-set-client-handshake=FALSE --binlog_format=ROW
        volumes:
            - mysql80_data:/var/lib/mysql
        restart: unless-stopped
        pull_policy: always
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
        cap_add:
            - SYS_NICE
        healthcheck:
            test: mysql --user=root --password=${MYSQL_ROOT_PASSWORD} --execute "show databases"
            interval: 5s
            timeout: 1s
            retries: 3
        ports:
            - 3360:3306
        labels:
            - "traefik.enable=true"
            - "traefik.tcp.routers.mysql80.rule=HostSNI(`*`)"
            - "traefik.tcp.routers.mysql80.entryPoints=mysql80"

    mysql:
        image: percona:5.7.44
        container_name: mysql
        command: mysqld --sql_mode="STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION" --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --show_compatibility_56=1 --log_bin_trust_function_creators=1 --max_allowed_packet=128M --default_storage_engine=InnoDB --character-set-client-handshake=FALSE --binlog_format=ROW
        volumes:
            - mysql_data:/var/lib/mysql
        restart: unless-stopped
        pull_policy: always
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
        healthcheck:
            test: mysql --user=root --password=${MYSQL_ROOT_PASSWORD} --execute "show databases"
            interval: 5s
            timeout: 1s
            retries: 3
        ports:
            - 3306:3306
        labels:
            - "traefik.enable=true"
            - "traefik.tcp.routers.mysql.rule=HostSNI(`*`)"
            - "traefik.tcp.routers.mysql.entryPoints=mysql"

    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:5.6.16
        container_name: elasticsearch
        restart: unless-stopped
        pull_policy: always
        depends_on:
            - mysql
        environment:
            - "http.host=0.0.0.0"
            - "transport.host=127.0.0.1"
            - "xpack.security.enabled=false"
            - "http.cors.enabled=true"
            - "http.cors.allow-origin=http://localhost:1358,http://127.0.0.1:1358"
            - "http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization"
            - "http.cors.allow-credentials=true"
        mem_limit: 2560m
        volumes:
            - elasticsearch_data:/usr/share/elasticsearch/data
        ports:
            - 9200:9200
        healthcheck:
            test: curl localhost:9200
            interval: 5s
            timeout: 1s
            retries: 3

    elasticsearch8:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
        container_name: elasticsearch8
        pull_policy: always
        restart: unless-stopped
        environment:
            - "http.host=0.0.0.0"
            - "transport.host=127.0.0.1"
            - "xpack.security.enabled=false"
            - "http.cors.enabled=true"
            - "http.cors.allow-origin=http://localhost:1358,http://127.0.0.1:1358"
            - "http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization"
            - "http.cors.allow-credentials=true"
        volumes:
            - elasticsearch8_data:/usr/share/elasticsearch/data
        ports:
            - 9201:9200
        healthcheck:
            test: curl localhost:9200
            interval: 5s
            timeout: 1s
            retries: 3

    maildev:
        image: maildev/maildev
        container_name: maildev
        pull_policy: always
        restart: unless-stopped
        healthcheck:
            disable: true
        expose:
            - 80
            - 25
        labels:
            - traefik.enable=true
            - traefik.http.services.maildev.loadbalancer.server.port=80
            - traefik.http.routers.maildev.rule=Host(`maildev.${HOST_IP}.traefik.me`)
            - traefik.http.routers.maildev.entryPoints=web
        environment:
            MAILDEV_WEB_PORT: 80
            MAILDEV_SMTP_PORT: 25

    phpmyadmin:
        image: phpmyadmin:apache
        container_name: phpmyadmin
        restart: unless-stopped
        pull_policy: always
        environment:
            UPLOAD_LIMIT: 1G
            PMA_HOSTS: mysql,mysql80
        labels:
            - traefik.enable=true
            - traefik.http.services.pma.loadbalancer.server.port=80
            - traefik.http.routers.pma.rule=Host(`pma.${HOST_IP}.traefik.me`)
            - traefik.http.routers.pma.entryPoints=web

    rabbitmq:
        image: rabbitmq:3.13-management-alpine
        pull_policy: always
        container_name: rabbitmq
        hostname: rabbit-node-1
        restart: unless-stopped
        labels:
            - traefik.enable=true
            - traefik.http.services.rabbitmq.loadbalancer.server.port=15672
            - traefik.http.routers.rabbitmq.rule=Host(`rabbitmq.${HOST_IP}.traefik.me`)
            - traefik.http.routers.rabbitmq.entryPoints=web
        environment:
            - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
            - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
            - RABBITMQ_DEFAULT_VHOST=/
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq

    redis:
        image: redis:7-alpine
        container_name: redis
        restart: unless-stopped
        pull_policy: always
        env_file:
            - .env
        command: redis-server --requirepass ${REDIS_PASSWORD}

    sftp:
        container_name: sftp
        restart: unless-stopped
        image: atmoz/sftp:alpine
        pull_policy: always
        volumes:
            - ${PWD}/ftp/share:/home/${FTP_USER}/share
            - ${PWD}/ftp/conf/ssh_host_ed25519_key:/etc/ssh/ssh_host_ed25519_key
            - ${PWD}/ftp/conf/ssh_host_rsa_key:/etc/ssh/ssh_host_rsa_key
        ports:
            - "2222:22"
        command: ${FTP_USER}:${FTP_PASSWORD}:${ID_USER}:${ID_GROUP}
        labels:
            - "traefik.enable=true"
            - "traefik.tcp.routers.sftp.rule=HostSNI(`*`)"
            - "traefik.tcp.routers.sftp.entryPoints=sftp"

    redis-commander:
        container_name: redis-commander
        image: rediscommander/redis-commander
        restart: unless-stopped
        depends_on:
            - redis
        env_file:
            - .env
        labels:
            - traefik.enable=true
            - traefik.http.services.redis-commander.loadbalancer.server.port=8081
            - traefik.http.routers.redis-commander.rule=Host(`redis-commander.${HOST_IP}.traefik.me`)
            - traefik.http.routers.redis-commander.entryPoints=web
        environment:
            - REDIS_HOST=redis
            - REDIS_PASSWORD=${REDIS_PASSWORD}
    postgres:
        image: postgres:16
        container_name: postgres
        ports:
            - 5432:5432
        volumes:
            - postgresql_data:/var/lib/postgresql/data
        restart: unless-stopped
        environment:
            POSTGRES_PASSWORD: postgres
        labels:
            - "traefik.enable=true"
            - "traefik.tcp.routers.sftp.rule=HostSNI(`*`)"
            - "traefik.tcp.routers.sftp.entryPoints=postgres"

volumes:
    elasticsearch_data:
        driver: local
    elasticsearch8_data:
        driver: local
    mysql_data:
        driver: local
    mysql80_data:
        driver: local
    rabbitmq_data:
        driver: local
    postgresql_data:
        driver: local

networks:
    default:
        name: traefik
